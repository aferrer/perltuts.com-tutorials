=head1 NAME

Types in Perl 6

=head1 LANGUAGE

en

=head1 ABSTRACT

=head1 DESCRIPTION

=head1 TUTORIAL

=head2 Subset types

In Perl 6, you can create your own type based on exising one. Such types are called subtypes, and
there there is a C<subset> keyword for creating it. The name C<subset> assumes that by creating a
subtype you restrict the range of possible values the variable of that subtype may agree to take.

To create a named subtype, the following syntax is used:

    my subset Odd of Int where {$^n % 2};

Here, C<Odd> is the name of the new subtype, C<Int> is the base type, and the block following
C<where> defines the rules and restricts the values of the subtype. Finally, C<$^n> is a placeholder
block variable, which corresponds to the first argument passed to the anonumous sub, which this block
defines.

Later, the just created subtype may be used in place where you can use any other regular type
or class name: C<my Odd $value>.

Having said that, the variable will be only able to accept odd integer numbers on assignments.
Thus, assiging the variable to 3 is legal, which an attempt to set it to 4 will result in an exception:
C<Type check failed in assignment to '$value'; expected 'Odd' but got 'Int'>.

    my Odd $value;
    $value = 3;
    # $value = 4; # error

As the C<where> block assumes smartmatching, it is possible to use many things there, including
regexes:

    my subset PerlFamily of Str where /Perl/;
    my PerlFamily $language = 'Perl 6'; # OK
    #$language = 'Python'; # Failure

A subtype can use also another existing subtype for further restricting the data set. Let's continue
with the previously defined C<Odd> subtype and define its subtype, which allows number betweeen 10 and
15 only:

    my subset Odd of Int where {$^n % 2};
    my subset OddRange of Odd where {10 < $^n < 15};

    for 1..20 -> $test {
        try {
            my OddRange $x;
            $x = $test;
            say $x;
        }
    }

A C<try> block is needed here to prevent the programme from exiting on incorrect assigments.

It is also possible to use anonymous subset. Here is an example of using it in a sub signature:

    sub odd($x where {$x % 2}) {
        say $x;
    }

    for 1..10 {
        try odd($^x);
    }

The programme will only print odd numbers, as it failes on passing even numbers to the C<odd()> sub.

Using subtypes in sub signatures can be very useful in combination with milti subs. You can split
variable ranges and create separate versions of the sub for handling different cases.

    multi sub getnum($x where {$x % 2 == 1}) {
        say "$x is odd";
    }

    multi sub getnum($x where {$x % 2 == 0}) {
        say "$x is even";
    }

    for 1..10 {
        getnum($^x);
    }

Note that there is no C<try> keyword anymore here because subtypes cover the whole range of values
providing to the loop body: odd numbers go to one multi sub, while even ones go to another.

=head2 Enums

Enumerations are kind of constant hashes providing keyâ€“value pairs, which in turn are called enums.
Basic enumeration is a list of strings, which get sequential integer numbers starting with 0.

    my enum seasons <winter spring summer autumn>;
    say +summer; # 2

After an enum is defined, its elements (keys) can be used either like instances of the C<seasons>
type, or as ints. Unary plus in the previous example forces numeric context.

Both sides of the enumeration element can be accessed with the help of the C<.key> and C<.value>
methods:

    my enum seasons <winter spring summer autumn>;
    say summer.key;   # summer
    say summer.value; # 2

It is possible to get all the pairs by calling C<.enums> method returning an object of the C<EnumMap>
type, with which you can work as with a hash:

    my enum seasons <winter spring summer autumn>;

    say seasons.enums.keys;
    say seasons.enums.values;
    say seasons.enums.perl;

Enumerations can be anonymous. In this case access to its elements is achieved by using techniques
for C<EnumMap>s or hashes.

    my $s = enum <winter spring summer autumn>;
    say $s<spring>; # 1

    my %s = enum ('winter', 'spring', 'summer', 'autumn');
    say %s<winter>; # 0

Also, there's no need to assign enumeration. It is enough to barely declare it and use its elements
in the programme.

Enum pairs allow abitrary values of their keys. The following example demonstrate how to create an
anonymous enumeration with pre-defined key values:

    enum roman (i => 1,   v => 5,
                x => 10,  l => 50,
                c => 100, d => 500,
                m => 1000);
    say +v; # 5

=head2 Mixins

A mixin is a thing that mixes additional functionality into your existing objects. For that you need
to have an object of some class and a role. A keyword C<does> is used to make a mixin.

In the following example, an variable C<$var> is an instance of the C<Int> class, the one predefined
in Perl 6. Then, a mixin is added to that object. The mixin behaviour is defined within the role
C<Verbose>. Object mutation happens at run-time.

    my $var = Int.new();
    $var = 42;
    $var.say();

    role Verbose {
        method say() {
            say "Value = " ~ self ~ '.';
        }
    }
    $var does Verbose;
    $var.say();

Likewise with class hierarchy, mixin may hide methods already available in the class. Here, the
C<say> method was redefined and its default behaviour is no longer accessible for the variable's
method with the same. Of course, new methods and class members may be creaeted with a mixin.

Mixines can be put on top of one another. In this case, the methods defined in the outmost ones
win. Let's extend the previous example with another role layer:

    role Verbose {
        method say() {
            say "Value = " ~ self ~ '.';
        }
    }

    role Silent {
        method say() {
            say "Secret value";
        }
    }

    my $var = 42;

    $var does Verbose;
    $var does Silent;

    $var.say(); # Secret value

Now, roles C<Verbose> and C<Silent> subsequently mixed in the C<$var> variable. Both roles contain
its own C<say> method, thus they replace the one existing for C<$var>. That was the one available for
C<Int>s (although this time it was not explicitly stated that the object is of that type).

There is another method of mixing in more than one role: by listing them after a single C<does>
keyword. In this case, however, all the methods should have different name. Conflicting names will
result in a compile error.

    role Verbose {
        method show() {
            say "Value = " ~ self ~ '.';
        }
    }

    role Silent {
        method hide() {
            say "Secret value";
        }
    }

    my $var = 42;

    $var does (Verbose, Silent);

    $var.say();
    $var.show();
    $var.hide();

Here, the three methods, C<say>, C<show> and C<hide>, coming from different classes and roles, were
called on the object C<$var>.

=head1 AUTHOR

Andrew Shitov, C<andy@shitov.ru>
